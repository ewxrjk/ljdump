#!/usr/bin/python3
#
# Convert ljdump output to browseable HTML
#
# Â© 2020 Richard Kettlewell.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files(the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import click
import codecs
import filecmp
import html
import os
import os.path
import re
import xml.etree.cElementTree as ET


RE_USER_REF = re.compile(r'<user\s+([^>]*)>')
RE_ATTRIBUTE = re.compile(r'([a-zA-Z0-9_]+)\s*=\s*"([^"]*)"')
RE_UNDERSCORE = re.compile('_')


def expand_user_refs(body, user_pattern):
    """Expand <user ...> elmeents in body and return the expanded version"""
    def repl(m):
        attributes = {}
        for a in RE_ATTRIBUTE.finditer(m.group(1)):
            a, v = a.group(1), a.group(2)
            attributes[a.lower()] = html.unescape(v)
        # Some <user...> elements have anomalous attributes
        for alt in ['name', 'comm']:
            if alt in attributes:
                attributes['user'] = attributes[alt]
        # Users with an underscore in the name turn into dashes when in a URL
        attributes['label'] = RE_UNDERSCORE.sub("-", attributes['user'])
        if 'site' in attributes:
            # If a site is specified follow that
            attributes['url'] = 'https://{label}.{site}/profile'.format(
                **attributes)
        else:
            # Otherwise assume it's on this site
            attributes['url'] = user_pattern.format(attributes["label"])
        return "<a class=user href=\"{}\">{}</a>".format(html.escape(attributes['url']), html.escape(attributes['user']))
    return RE_USER_REF.sub(repl, body)


class event(object):
    def __init__(self, p, root):
        self.opt_preformatted = 0
        self.subject = ''
        self.comments = {}
        if root.tag != 'event':
            raise Exception("{}: unexpected element <{}>".format(p, root.tag))
        for child in root:
            if child.tag == 'itemid':
                self.itemid = int(child.text)
            elif child.tag == 'eventtime':
                self.eventtime = child.text
            elif child.tag == 'event':
                self.event = child.text
            elif child.tag == 'subject':
                self.subject = child.text
            elif child.tag == 'url':
                self.url = child.text
            elif child.tag == 'import_source':
                self.import_source = child.text
            elif child.tag == 'opt_preformatted':
                self.opt_preformatted = int(child.text)

    def _organize_comments(self):
        cs = sorted(self.comments.values())
        self.children = []
        for c in cs:
            c.children = []
        for c in cs:
            if c.parentid == None:
                self.children.append(c)
            else:
                self.comments[c.parentid].children.append(c)

    def render(self, p, user_pattern):
        self._organize_comments()
        np = "{}.tmp".format(p)
        with codecs.open(np, "w", "utf-8") as f:
            f.write("<html><head>\n")
            f.write("<meta charset=\"UTF-8\">\n")
            f.write("<title>{}</title>".format(html.escape(self.subject)))
            f.write("<style>\n")
            f.write("div.children { margin-left: 2em }\n")
            f.write("div.comment_body { padding: 4px }\n")
            f.write(
                "table.comment, table.item { background: #e0e0e0; width: 100% }\n")
            f.write("td.furniture { white-space: nowrap; width: 1% }\n")
            f.write("</style>\n")
            f.write("</head>\n")
            f.write("<body><h1>{}</h1>\n".format(html.escape(self.subject)))
            f.write("<table class=item>\n")
            f.write("<tr><td class=furniture>Date:</td><td>{}</td></tr>\n".format(
                    self.eventtime))
            f.write("<tr><td class=furniture>URL:</td><td><a href=\"{}\">{}</a></td></tr>\n"
                    .format(html.escape(self.url, True), html.escape(self.url)))
            f.write("</table>\n")
            f.write("<div class=item_body>\n")
            event = expand_user_refs(self.event, user_pattern)
            if self.opt_preformatted:
                f.write("<p class=preformatted>")
                f.write(re.sub("\n", "<br>\n", event))
                f.write("</p>\n")
            else:
                f.write(event)
                f.write("\n")
            f.write("</div>\n")
            if len(self.children):
                f.write("<hr>\n")
                f.write("<div class=comments>\n")
                for c in self.children:
                    c.render(f, user_pattern)
                f.write("</div>\n")
            f.write("</body><html>\n")
        if os.path.exists(p) and filecmp.cmp(p, np):
            os.remove(np)
            return
        os.rename(np, p)


class comment(object):
    def __init__(self, p, root):
        self.parentid = None
        self.subject = ''
        self.user = '(unknown)'
        if root.tag != 'comment':
            raise Exception("{}: unexpected element <{}>".format(p, root.tag))
        for child in root:
            if child.tag == 'body':
                self.body = child.text
            elif child.tag == 'date':
                self.eventtime = child.text
            elif child.tag == 'id':
                self.cid = child.text
            elif child.tag == 'parentid':
                self.parentid = child.text
            elif child.tag == 'state':
                self.state = child.text
            elif child.tag == 'subject':
                self.subject = child.text
            elif child.tag == 'user':
                self.user = child.text
        if self.parentid == '':
            self.parentid = None
        if self.subject == '':
            self.parentid = None

    def __lt__(self, other):
        # Sort comments with dates before comments without
        if self.eventtime is None:
            if other.eventtime is None:
                return self.cid < other.cid
            else:
                return False
        else:
            if other.eventtime is None:
                return True
            else:
                return self.eventtime < other.eventtime

    def render(self, f, user_pattern):
        f.write("<div class=comment> <!-- cid={} parentid={} -->\n"
                .format(self.cid, self.parentid))
        f.write("<table class=comment>\n")
        if user_pattern == None:
            f.write(
                "<tr><td class=furniture>Commenter:</td><td>{}</td></tr>\n".format(self.user))
        else:
            f.write("<tr><td class=furniture>Commenter:</td><td><a href=\"{}\">{}</a></td></tr>\n"
                    .format(html.escape(user_pattern.format(self.user)), self.user))
        f.write("<tr><td>Date:</td><td>{}</td></tr>\n".format(self.eventtime))
        if self.subject != None:
            f.write("<tr><td>Subject:</td><td>{}</td></tr>\n"
                    .format(html.escape(self.subject)))
        f.write("</table>\n")
        if self.body is not None:
            body = expand_user_refs(self.body, user_pattern)
            f.write("<div class=comment_body>\n")
            f.write(re.sub("\n", "<br>\n", body))
            f.write("</div>\n")
        f.write("</div>\n")
        if len(self.children):
            f.write("<div class=children>\n")
            for c in self.children:
                c.render(f, user_pattern)
            f.write("</div>\n")


class journal(object):
    def __init__(self):
        self.events = {}

    def populate(self, d):
        fs = os.listdir(d)
        for f in fs:
            if f[:2] == 'L-':
                self.populate_entry(os.path.join(d, f))
        for f in fs:
            if f[:2] == 'C-':
                itemid = re.sub("C-", "", f)
                self.populate_comments(os.path.join(
                    d, f), self.events[int(itemid)])

    def populate_entry(self, p):
        e = event(p, ET.parse(p).getroot())
        self.events[e.itemid] = e

    def populate_comments(self, p, e):
        root = ET.parse(p).getroot()
        if root.tag != 'comments':
            raise Exception("{}: unexpected element <{}>".format(p, root.tag))
        for child in root:
            c = comment(p, child)
            e.comments[c.cid] = c

    def render(self, d, user_pattern):
        for itemid in self.events:
            e = self.events[itemid]
            e.render(os.path.join(d, re.sub(".*/", "", e.url)), user_pattern)

    def infer_user_pattern(self):
        for itemid in self.events:
            e = self.events[itemid]
            if 'livejournal.com' in e.url:
                return "http://{}.livejournal.com/profile"
            if 'dreamwidth.org' in e.url:
                return "https://{}.dreamwidth.org/profile"
            return None


@click.command(help="""Reads ljdump output from directory INPUT and generates HTML in directory OUTPUT.""")
@click.option('--user-pattern', type=str,
              help='pattern for user URLs')
@click.argument('input')
@click.argument('output')
def main(user_pattern, input, output):
    j = journal()
    j.populate(input)
    if user_pattern == None:
        user_pattern = j.infer_user_pattern()
    if not os.path.exists(output):
        os.makedirs(output)
    j.render(output, user_pattern)


if __name__ == "__main__":
    main()
